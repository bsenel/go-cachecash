// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bootstrap.proto

package ccmsg

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CacheAnnounceRequest struct {
	// TODO: there's no proof the public_key belongs to us
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	FreeMemory           uint64   `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
	TotalMemory          uint64   `protobuf:"varint,4,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	FreeDisk             uint64   `protobuf:"varint,5,opt,name=free_disk,json=freeDisk,proto3" json:"free_disk,omitempty"`
	TotalDisk            uint64   `protobuf:"varint,6,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	StartupTime          int64    `protobuf:"varint,7,opt,name=startup_time,json=startupTime,proto3" json:"startup_time,omitempty"`
	ContactAddr           string   `protobuf:"bytes,8,opt,name=contact_addr,json=contactAddr,proto3" json:"contact_addr,omitempty"`
	Port                 uint32   `protobuf:"varint,9,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheAnnounceRequest) Reset()         { *m = CacheAnnounceRequest{} }
func (m *CacheAnnounceRequest) String() string { return proto.CompactTextString(m) }
func (*CacheAnnounceRequest) ProtoMessage()    {}
func (*CacheAnnounceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e3cc050d1b41a9e, []int{0}
}
func (m *CacheAnnounceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheAnnounceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheAnnounceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheAnnounceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheAnnounceRequest.Merge(m, src)
}
func (m *CacheAnnounceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CacheAnnounceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheAnnounceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CacheAnnounceRequest proto.InternalMessageInfo

func (m *CacheAnnounceRequest) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CacheAnnounceRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CacheAnnounceRequest) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return 0
}

func (m *CacheAnnounceRequest) GetTotalMemory() uint64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *CacheAnnounceRequest) GetFreeDisk() uint64 {
	if m != nil {
		return m.FreeDisk
	}
	return 0
}

func (m *CacheAnnounceRequest) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *CacheAnnounceRequest) GetStartupTime() int64 {
	if m != nil {
		return m.StartupTime
	}
	return 0
}

func (m *CacheAnnounceRequest) GetContactAddr() string {
	if m != nil {
		return m.ContactAddr
	}
	return ""
}

func (m *CacheAnnounceRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type CacheAnnounceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheAnnounceResponse) Reset()         { *m = CacheAnnounceResponse{} }
func (m *CacheAnnounceResponse) String() string { return proto.CompactTextString(m) }
func (*CacheAnnounceResponse) ProtoMessage()    {}
func (*CacheAnnounceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e3cc050d1b41a9e, []int{1}
}
func (m *CacheAnnounceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheAnnounceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheAnnounceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheAnnounceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheAnnounceResponse.Merge(m, src)
}
func (m *CacheAnnounceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CacheAnnounceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheAnnounceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CacheAnnounceResponse proto.InternalMessageInfo

type CacheFetchRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheFetchRequest) Reset()         { *m = CacheFetchRequest{} }
func (m *CacheFetchRequest) String() string { return proto.CompactTextString(m) }
func (*CacheFetchRequest) ProtoMessage()    {}
func (*CacheFetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e3cc050d1b41a9e, []int{2}
}
func (m *CacheFetchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheFetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheFetchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheFetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheFetchRequest.Merge(m, src)
}
func (m *CacheFetchRequest) XXX_Size() int {
	return m.Size()
}
func (m *CacheFetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheFetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CacheFetchRequest proto.InternalMessageInfo

type CacheDescription struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	FreeMemory           uint64   `protobuf:"varint,3,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"`
	TotalMemory          uint64   `protobuf:"varint,4,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	FreeDisk             uint64   `protobuf:"varint,5,opt,name=free_disk,json=freeDisk,proto3" json:"free_disk,omitempty"`
	TotalDisk            uint64   `protobuf:"varint,6,opt,name=total_disk,json=totalDisk,proto3" json:"total_disk,omitempty"`
	StartupTime          int64    `protobuf:"varint,7,opt,name=startup_time,json=startupTime,proto3" json:"startup_time,omitempty"`
	ContactAddr           string   `protobuf:"bytes,8,opt,name=contact_addr,json=contactAddr,proto3" json:"contact_addr,omitempty"`
	ExternalIp           string   `protobuf:"bytes,9,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	Port                 uint32   `protobuf:"varint,10,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheDescription) Reset()         { *m = CacheDescription{} }
func (m *CacheDescription) String() string { return proto.CompactTextString(m) }
func (*CacheDescription) ProtoMessage()    {}
func (*CacheDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e3cc050d1b41a9e, []int{3}
}
func (m *CacheDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheDescription.Merge(m, src)
}
func (m *CacheDescription) XXX_Size() int {
	return m.Size()
}
func (m *CacheDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheDescription.DiscardUnknown(m)
}

var xxx_messageInfo_CacheDescription proto.InternalMessageInfo

func (m *CacheDescription) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CacheDescription) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CacheDescription) GetFreeMemory() uint64 {
	if m != nil {
		return m.FreeMemory
	}
	return 0
}

func (m *CacheDescription) GetTotalMemory() uint64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

func (m *CacheDescription) GetFreeDisk() uint64 {
	if m != nil {
		return m.FreeDisk
	}
	return 0
}

func (m *CacheDescription) GetTotalDisk() uint64 {
	if m != nil {
		return m.TotalDisk
	}
	return 0
}

func (m *CacheDescription) GetStartupTime() int64 {
	if m != nil {
		return m.StartupTime
	}
	return 0
}

func (m *CacheDescription) GetContactAddr() string {
	if m != nil {
		return m.ContactAddr
	}
	return ""
}

func (m *CacheDescription) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *CacheDescription) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type CacheFetchResponse struct {
	Caches               []*CacheDescription `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CacheFetchResponse) Reset()         { *m = CacheFetchResponse{} }
func (m *CacheFetchResponse) String() string { return proto.CompactTextString(m) }
func (*CacheFetchResponse) ProtoMessage()    {}
func (*CacheFetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e3cc050d1b41a9e, []int{4}
}
func (m *CacheFetchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheFetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheFetchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheFetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheFetchResponse.Merge(m, src)
}
func (m *CacheFetchResponse) XXX_Size() int {
	return m.Size()
}
func (m *CacheFetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheFetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CacheFetchResponse proto.InternalMessageInfo

func (m *CacheFetchResponse) GetCaches() []*CacheDescription {
	if m != nil {
		return m.Caches
	}
	return nil
}

func init() {
	proto.RegisterType((*CacheAnnounceRequest)(nil), "ccmsg.CacheAnnounceRequest")
	proto.RegisterType((*CacheAnnounceResponse)(nil), "ccmsg.CacheAnnounceResponse")
	proto.RegisterType((*CacheFetchRequest)(nil), "ccmsg.CacheFetchRequest")
	proto.RegisterType((*CacheDescription)(nil), "ccmsg.CacheDescription")
	proto.RegisterType((*CacheFetchResponse)(nil), "ccmsg.CacheFetchResponse")
}

func init() { proto.RegisterFile("bootstrap.proto", fileDescriptor_5e3cc050d1b41a9e) }

var fileDescriptor_5e3cc050d1b41a9e = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x93, 0x5f, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0x49, 0x9a, 0xd6, 0xe3, 0x14, 0xca, 0x02, 0xea, 0x92, 0x42, 0xea, 0xe6, 0xc9,
	0x2f, 0x24, 0x52, 0x39, 0x01, 0x25, 0x20, 0x21, 0xfe, 0x3c, 0x58, 0xf0, 0x1c, 0xd9, 0x9b, 0x69,
	0x62, 0xc5, 0xf6, 0x2e, 0xbb, 0x6b, 0x44, 0x6e, 0xc2, 0x01, 0x90, 0xb8, 0x08, 0x0f, 0x3c, 0x72,
	0x04, 0x14, 0x2e, 0x82, 0x3c, 0xb1, 0x91, 0x15, 0xf5, 0x06, 0xbc, 0xed, 0xfc, 0xbe, 0x99, 0xd1,
	0xf8, 0xf3, 0x0c, 0xdc, 0x4d, 0x94, 0x72, 0xd6, 0x99, 0x58, 0x4f, 0xb4, 0x51, 0x4e, 0xf1, 0x43,
	0x29, 0x73, 0xbb, 0x1c, 0x3e, 0x5d, 0xa6, 0x6e, 0x55, 0x26, 0x13, 0xa9, 0xf2, 0xe9, 0x52, 0x2d,
	0xd5, 0x94, 0xd4, 0xa4, 0xbc, 0xa1, 0x88, 0x02, 0x7a, 0xed, 0xaa, 0xc6, 0xdf, 0x3b, 0xf0, 0xe0,
	0x45, 0x2c, 0x57, 0xf8, 0xbc, 0x28, 0x54, 0x59, 0x48, 0x8c, 0xf0, 0x53, 0x89, 0xd6, 0xf1, 0x27,
	0x00, 0xba, 0x4c, 0xb2, 0x54, 0xce, 0xd7, 0xb8, 0x11, 0x2c, 0x60, 0xe1, 0x20, 0xf2, 0x76, 0xe4,
	0x0d, 0x6e, 0xb8, 0x80, 0xa3, 0xcf, 0x68, 0x6c, 0xaa, 0x0a, 0xd1, 0x09, 0x58, 0xe8, 0x45, 0x4d,
	0xc8, 0x2f, 0xc0, 0xbf, 0x31, 0x88, 0xf3, 0x1c, 0x73, 0x65, 0x36, 0xa2, 0x1b, 0xb0, 0xb0, 0x17,
	0x41, 0x85, 0xde, 0x11, 0xe1, 0x97, 0x30, 0x70, 0xca, 0xc5, 0x59, 0x93, 0xd1, 0xa3, 0x0c, 0x9f,
	0x58, 0x9d, 0x72, 0x0e, 0x1e, 0xf5, 0x58, 0xa4, 0x76, 0x2d, 0x0e, 0x49, 0x3f, 0xae, 0xc0, 0x2c,
	0xb5, 0xeb, 0x6a, 0xb2, 0x5d, 0x3d, 0xa9, 0x7d, 0x52, 0x3d, 0x22, 0x24, 0x5f, 0xc2, 0xc0, 0xba,
	0xd8, 0xb8, 0x52, 0xcf, 0x5d, 0x9a, 0xa3, 0x38, 0x0a, 0x58, 0xd8, 0x8d, 0xfc, 0x9a, 0x7d, 0x48,
	0x73, 0xac, 0x46, 0x94, 0xaa, 0x70, 0xb1, 0x74, 0xf3, 0xd2, 0x64, 0xe2, 0x98, 0x3e, 0x00, 0x6a,
	0xf4, 0xd1, 0x64, 0x9c, 0x43, 0x4f, 0x2b, 0xe3, 0x84, 0x17, 0xb0, 0xf0, 0x24, 0xa2, 0xf7, 0xf8,
	0x0c, 0x1e, 0xee, 0x19, 0x65, 0xb5, 0x2a, 0x2c, 0x8e, 0xef, 0xc3, 0x3d, 0x12, 0x5e, 0xa1, 0x93,
	0xab, 0xda, 0xbe, 0xf1, 0x8f, 0x0e, 0x9c, 0x12, 0x9d, 0xa1, 0x95, 0x26, 0xd5, 0xae, 0xb2, 0xe6,
	0xbf, 0xf6, 0xf4, 0x02, 0x7c, 0xfc, 0xe2, 0xd0, 0x14, 0x71, 0x36, 0x4f, 0x35, 0x59, 0xeb, 0x45,
	0xd0, 0xa0, 0xd7, 0xfa, 0x9f, 0xe9, 0xd0, 0x32, 0xfd, 0x25, 0xf0, 0xb6, 0xb7, 0x3b, 0xc7, 0xf9,
	0x14, 0xfa, 0xb2, 0xa2, 0x56, 0xb0, 0xa0, 0x1b, 0xfa, 0x57, 0x67, 0x13, 0xda, 0xfd, 0xc9, 0xbe,
	0xe1, 0x51, 0x9d, 0x76, 0xf5, 0x8d, 0xc1, 0x9d, 0xf7, 0x6a, 0x81, 0xd7, 0xcd, 0xcd, 0x2c, 0xf8,
	0x5b, 0x38, 0x69, 0xfe, 0x24, 0x95, 0xf1, 0xf3, 0x76, 0x93, 0xbd, 0x6b, 0x18, 0x3e, 0xbe, 0x5d,
	0xac, 0x37, 0xe0, 0x80, 0xcf, 0xc0, 0xa7, 0x11, 0x49, 0xb7, 0x5c, 0xb4, 0xd3, 0xdb, 0x7b, 0x31,
	0x7c, 0x74, 0x8b, 0xd2, 0x74, 0xb9, 0x3e, 0xfd, 0xb9, 0x1d, 0xb1, 0x5f, 0xdb, 0x11, 0xfb, 0xbd,
	0x1d, 0xb1, 0xaf, 0x7f, 0x46, 0x07, 0x49, 0x9f, 0xae, 0xf4, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xbe, 0x81, 0xb3, 0x8e, 0xee, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeBootstrapdClient is the client API for NodeBootstrapd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeBootstrapdClient interface {
	AnnounceCache(ctx context.Context, in *CacheAnnounceRequest, opts ...grpc.CallOption) (*CacheAnnounceResponse, error)
	FetchCaches(ctx context.Context, in *CacheFetchRequest, opts ...grpc.CallOption) (*CacheFetchResponse, error)
}

type nodeBootstrapdClient struct {
	cc *grpc.ClientConn
}

func NewNodeBootstrapdClient(cc *grpc.ClientConn) NodeBootstrapdClient {
	return &nodeBootstrapdClient{cc}
}

func (c *nodeBootstrapdClient) AnnounceCache(ctx context.Context, in *CacheAnnounceRequest, opts ...grpc.CallOption) (*CacheAnnounceResponse, error) {
	out := new(CacheAnnounceResponse)
	err := c.cc.Invoke(ctx, "/ccmsg.NodeBootstrapd/AnnounceCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeBootstrapdClient) FetchCaches(ctx context.Context, in *CacheFetchRequest, opts ...grpc.CallOption) (*CacheFetchResponse, error) {
	out := new(CacheFetchResponse)
	err := c.cc.Invoke(ctx, "/ccmsg.NodeBootstrapd/FetchCaches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeBootstrapdServer is the server API for NodeBootstrapd service.
type NodeBootstrapdServer interface {
	AnnounceCache(context.Context, *CacheAnnounceRequest) (*CacheAnnounceResponse, error)
	FetchCaches(context.Context, *CacheFetchRequest) (*CacheFetchResponse, error)
}

func RegisterNodeBootstrapdServer(s *grpc.Server, srv NodeBootstrapdServer) {
	s.RegisterService(&_NodeBootstrapd_serviceDesc, srv)
}

func _NodeBootstrapd_AnnounceCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeBootstrapdServer).AnnounceCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmsg.NodeBootstrapd/AnnounceCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeBootstrapdServer).AnnounceCache(ctx, req.(*CacheAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeBootstrapd_FetchCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeBootstrapdServer).FetchCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ccmsg.NodeBootstrapd/FetchCaches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeBootstrapdServer).FetchCaches(ctx, req.(*CacheFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeBootstrapd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ccmsg.NodeBootstrapd",
	HandlerType: (*NodeBootstrapdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnounceCache",
			Handler:    _NodeBootstrapd_AnnounceCache_Handler,
		},
		{
			MethodName: "FetchCaches",
			Handler:    _NodeBootstrapd_FetchCaches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bootstrap.proto",
}

func (m *CacheAnnounceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheAnnounceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.FreeMemory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.FreeMemory))
	}
	if m.TotalMemory != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.TotalMemory))
	}
	if m.FreeDisk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.FreeDisk))
	}
	if m.TotalDisk != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.TotalDisk))
	}
	if m.StartupTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.StartupTime))
	}
	if len(m.ContactAddr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ContactAddr)))
		i += copy(dAtA[i:], m.ContactAddr)
	}
	if m.Port != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheAnnounceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheAnnounceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheFetchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheFetchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.FreeMemory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.FreeMemory))
	}
	if m.TotalMemory != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.TotalMemory))
	}
	if m.FreeDisk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.FreeDisk))
	}
	if m.TotalDisk != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.TotalDisk))
	}
	if m.StartupTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.StartupTime))
	}
	if len(m.ContactAddr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ContactAddr)))
		i += copy(dAtA[i:], m.ContactAddr)
	}
	if len(m.ExternalIp) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ExternalIp)))
		i += copy(dAtA[i:], m.ExternalIp)
	}
	if m.Port != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CacheFetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheFetchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Caches) > 0 {
		for _, msg := range m.Caches {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBootstrap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CacheAnnounceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.FreeMemory != 0 {
		n += 1 + sovBootstrap(uint64(m.FreeMemory))
	}
	if m.TotalMemory != 0 {
		n += 1 + sovBootstrap(uint64(m.TotalMemory))
	}
	if m.FreeDisk != 0 {
		n += 1 + sovBootstrap(uint64(m.FreeDisk))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovBootstrap(uint64(m.TotalDisk))
	}
	if m.StartupTime != 0 {
		n += 1 + sovBootstrap(uint64(m.StartupTime))
	}
	l = len(m.ContactAddr)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovBootstrap(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheAnnounceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheFetchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.FreeMemory != 0 {
		n += 1 + sovBootstrap(uint64(m.FreeMemory))
	}
	if m.TotalMemory != 0 {
		n += 1 + sovBootstrap(uint64(m.TotalMemory))
	}
	if m.FreeDisk != 0 {
		n += 1 + sovBootstrap(uint64(m.FreeDisk))
	}
	if m.TotalDisk != 0 {
		n += 1 + sovBootstrap(uint64(m.TotalDisk))
	}
	if m.StartupTime != 0 {
		n += 1 + sovBootstrap(uint64(m.StartupTime))
	}
	l = len(m.ContactAddr)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.ExternalIp)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovBootstrap(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CacheFetchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Caches) > 0 {
		for _, e := range m.Caches {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBootstrap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBootstrap(x uint64) (n int) {
	return sovBootstrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheAnnounceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheAnnounceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheAnnounceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeMemory", wireType)
			}
			m.FreeMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeDisk", wireType)
			}
			m.FreeDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupTime", wireType)
			}
			m.StartupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartupTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheAnnounceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheAnnounceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheAnnounceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheFetchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheFetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheFetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeMemory", wireType)
			}
			m.FreeMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMemory", wireType)
			}
			m.TotalMemory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMemory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeDisk", wireType)
			}
			m.FreeDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDisk", wireType)
			}
			m.TotalDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartupTime", wireType)
			}
			m.StartupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartupTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheFetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheFetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheFetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBootstrap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caches = append(m.Caches, &CacheDescription{})
			if err := m.Caches[len(m.Caches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBootstrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBootstrap
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBootstrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrap   = fmt.Errorf("proto: integer overflow")
)
